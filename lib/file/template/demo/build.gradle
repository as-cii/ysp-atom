// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        maven { url 'http://repo.yypm.com:8181/nexus/content/groups/public' }
        maven { url 'http://repo.yypm.com:8181/nexus/content/repositories/releases' }
        maven { url 'http://repo.yypm.com:8181/nexus/content/repositories/snapshots' }
        maven { url 'http://repo.yypm.com:8181/nexus/content/repositories/thirdparty' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'plugins'}
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'net.researchgate:gradle-release:2.0.2'
        classpath 'com.android.tools.build:gradle:2.2.3'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath "com.yy.android.small.tools.build:gradle-small:${small_version}"
        // NOTE: Do not place your application dependencies here; they belong
        classpath "de.undercouch:gradle-download-task:3.1.2"
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        maven { url 'http://repo.yypm.com:8181/nexus/content/groups/public' }
        maven { url 'http://repo.yypm.com:8181/nexus/content/repositories/releases' }
        maven { url 'http://repo.yypm.com:8181/nexus/content/repositories/snapshots' }
        maven { url 'http://repo.yypm.com:8181/nexus/content/repositories/thirdparty' }
        mavenCentral()
        jcenter()
    }

    configurations.all {
        // check for updates every build
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

apply plugin: 'com.yy.android.small'
small {
    aarVersion = "${small_version}"
    hostModuleName = "yymobile"
}
rootProject.small.bundles("app", "${project_name}$")

apply plugin: 'net.researchgate.release'
release {
    failOnUnversionedFiles = false
    failOnUpdateNeeded = false
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task wrapper(type: Wrapper) {
    gradleVersion = "${gradle_version}"
}
