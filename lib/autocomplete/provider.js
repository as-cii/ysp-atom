// Generated by CoffeeScript 1.12.0
(function() {
  module.exports = {
    selector: '.source.js, .source.coffee',
    disableForSelector: '.source.js .comment',
    filterSuggestions: true,
    suggestionPriority: 2,
    getSuggestions: function(arg) {
      var bufferPosition, editor, i, len, prefix, ref, suggestion, suggestions;
      editor = arg.editor, bufferPosition = arg.bufferPosition;
      prefix = this.getPrefix(editor, bufferPosition).trim();
      if (prefix.toLowerCase().includes('yyapi')) {
        suggestions = [];
        ref = this.getYYApiPackage().concat(this.getApiEnt());
        for (i = 0, len = ref.length; i < len; i++) {
          suggestion = ref[i];
          suggestion.replacementPrefix = prefix;
          suggestion.descriptionMoreURL = 'http://dev.yypm.com/yylive/? post=posts/yyscriptpluginsdk/api.md';
          suggestions.push(suggestion);
        }
        return suggestions;
      }
    },
    getYYApiPackage: function() {
      var ent, log, res, utils;
      ent = {
        text: 'YYAPI.ent',
        snippet: 'YYAPI.ent',
        type: 'class',
        description: 'Ent 相关接口'
      };
      res = {
        text: 'YYAPI.res',
        snippet: 'YYAPI.res',
        displayText: 'YYAPI.res',
        type: 'class',
        description: 'Res 相关接口'
      };
      log = {
        text: 'YYAPI.log',
        snippet: 'YYAPI.log',
        type: 'function',
        description: 'log 接口'
      };
      utils = {
        text: 'YYAPI.utils',
        snippet: 'YYAPI.utils',
        type: 'class',
        description: 'Utils 相关接口'
      };
      return [ent, res, log, utils];
    },
    getApiEnt: function() {
      var addCoreClient, notifyCoreClient, registerEntProtocol, registerEntStruct, removeAllCoreClient, removeCoreClient, sendEntProtocol;
      sendEntProtocol = {
        text: 'YYAPI.ent.sendEntProtocolByMaxType_minType_info();',
        type: 'function',
        description: '通过大小端号发送协议'
      };
      registerEntProtocol = {
        text: 'YYAPI.ent.registerEntProtocolByMaxType_minType_block();',
        type: 'function',
        description: '通过大小端号注册协议回调'
      };
      registerEntStruct = {
        text: 'YYAPI.ent.registerEntStructByMaxType_minType_info();',
        type: 'function',
        description: '通过大小端号注册协议结构'
      };
      addCoreClient = {
        text: 'YYAPI.ent.addCoreClient_protocl();',
        type: 'function',
        description: '监听Protocol'
      };
      removeCoreClient = {
        text: 'YYAPI.ent.removeCoreClient_protocl();',
        type: 'function',
        description: '移除监听'
      };
      removeAllCoreClient = {
        text: 'YYAPI.ent.removeAllCoreClient();',
        type: 'function',
        description: '移除所有的监听'
      };
      notifyCoreClient = {
        text: 'YYApi.ent.notifyCoreClientWithProtocl_selector_argsType_args();',
        type: 'function',
        description: '协议通知'
      };
      return [sendEntProtocol, registerEntProtocol, registerEntStruct, addCoreClient, removeCoreClient, removeAllCoreClient, notifyCoreClient];
    },
    getPrefix: function(editor, bufferPosition) {
      var line;
      line = editor.getTextInRange([[bufferPosition.row, 0], bufferPosition]);
      return line;
    },
    onDidInsertSuggestion: function(arg) {
      var editor, suggestion;
      editor = arg.editor, suggestion = arg.suggestion;
      if (suggestion.type === 'attribute') {
        return setTimeout(this.triggerAutocomplete.bind(this, editor), 1);
      }
    },
    triggerAutocomplete: function(editor) {
      return atom.commands.dispatch(atom.views.getView(editor), 'autocomplete-plus:activate', {
        activatedManually: false
      });
    }
  };

}).call(this);
