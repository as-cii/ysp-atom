// Generated by CoffeeScript 1.12.0
(function() {
  var File, FileUtils, Path, XibToolsHelper;

  File = require('atom').File;

  FileUtils = require('./../file/file-utils.js').FileUtils;

  Path = require('path').Path;

  module.exports = XibToolsHelper = (function() {
    XibToolsHelper.prototype.propertyLabels = [];

    XibToolsHelper.prototype.classFlie = null;

    XibToolsHelper.prototype.xibFile = null;

    function XibToolsHelper(args) {}

    XibToolsHelper.prototype.openXib = function(filePath) {
      var exec, fs, process, self;
      console.log('FILEPATH', filePath);
      process = require('child_process');
      exec = process.exec;
      exec('open "' + filePath + '"');
      fs = new File(filePath, false);
      self = this;
      return fs.onDidChange(function() {
        return fs.read().then(function(xmlString) {
          var xmlreader;
          xmlreader = require('xmlreader');
          return xmlreader.read(xmlString, function(errors, response) {
            var str;
            console.log('FILEPATH', filePath);
            self.propertyLabels = [];
            self.className = filePath.split('/').pop().split('.')[0];
            str = filePath.replace(".xib", ".js");
            str = str.replace("ios/res/xib", "ios/script/xib");
            console.log('STR', str);
            self.getPropertyLabelWithView(response.document.objects.view);
            return self.saveToJSClass(str, self.className, self.propertyLabels);
          });
        });
      });
    };

    XibToolsHelper.prototype.newXib = function() {
      var AddDialog, dialog, self;
      AddDialog = require('./add-dialog');
      dialog = new AddDialog("ios/res/xib/", true);
      self = this;
      dialog.on('file-created', function(event, createdPath) {
        return false;
      });
      return dialog.attach();
    };

    XibToolsHelper.prototype.getPropertyLabelWithView = function(view) {
      var i, label, len, ref, subview, subviews;
      if (view.array != null) {
        ref = view.array;
        for (i = 0, len = ref.length; i < len; i++) {
          subview = ref[i];
          this.getPropertyLabelWithView(subview);
        }
        return;
      }
      if ((view.attributes().userLabel != null) && view.attributes().userLabel.startsWith("@")) {
        label = view.attributes().userLabel.replace("@", "");
        this.propertyLabels.push("'" + label + "'");
      }
      subviews = view.subviews;
      if (subviews != null) {
        if (subviews.button != null) {
          this.getPropertyLabelWithView(subviews.button);
        }
        if (subviews.label != null) {
          this.getPropertyLabelWithView(subviews.label);
        }
        if (subviews.view != null) {
          this.getPropertyLabelWithView(subviews.view);
        }
        if (subviews.tableView != null) {
          this.getPropertyLabelWithView(subviews.tableView);
        }
        if (subviews.imageView != null) {
          this.getPropertyLabelWithView(subviews.imageView);
        }
        if (subviews.textField != null) {
          this.getPropertyLabelWithView(subviews.textField);
        }
        if (subviews.webView != null) {
          return this.getPropertyLabelWithView(subviews.webView);
        }
      }
    };

    XibToolsHelper.prototype.saveToJSClass = function(filePath, className, propertyLabels) {
      var jsfs;
      console.log('FILEPATH', filePath);
      jsfs = new File(filePath, false);
      console.log('JSFS', jsfs);
      return jsfs.exists().then(function(isExists) {
        var jsContent;
        console.log('ISEXISTS', isExists);
        if (isExists) {
          console.log('CONDITION PASSED');
          return jsfs.read().then(function(text) {
            var reg, str;
            console.log('TEXT', text);
            reg = new RegExp('\(YYClass\\(.*\)\\[.*\\]', 'gi');
            str = text.replace(reg, "$1[" + propertyLabels + "]");
            return jsfs.writeSync(str);
          });
        } else {
          jsContent = "YYClass('" + className + ":YYXibUIView', [" + propertyLabels + "],{},{})";
          return jsfs.create().then(function(isCreated) {
            return jsfs.writeSync(jsContent);
          });
        }
      });
    };

    XibToolsHelper.prototype.openTreeView = function() {
      var nuclideFileTree, packageObj, path, ref, treeView;
      packageObj = null;
      if (atom.packages.isPackageLoaded('nuclide-file-tree') === true) {
        nuclideFileTree = atom.packages.getLoadedPackage('nuclide-file-tree');
        path = (ref = nuclideFileTree.contextMenuManager.activeElement) != null ? ref.getAttribute('data-path') : void 0;
        packageObj = {
          selectedPath: path
        };
      }
      if (atom.packages.isPackageLoaded('tree-view') === true) {
        treeView = atom.packages.getLoadedPackage('tree-view');
        treeView = require(treeView.mainModulePath);
        packageObj = treeView.serialize();
      }
      if (typeof packageObj !== 'undefined' && packageObj !== null) {
        if (packageObj.selectedPath) {
          return this.openXib(packageObj.selectedPath);
        }
      }
    };

    return XibToolsHelper;

  })();

}).call(this);
